// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;

namespace CppSharpGenerated
{
    public unsafe partial class HelloClass : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
            [SuppressUnmanagedCodeSecurity]
            [DllImport("Lib", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0HelloClass@@QEAA@AEBV0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr instance, global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Lib", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?hello@HelloClass@@QEAAXXZ")]
            internal static extern void Hello(global::System.IntPtr instance);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::CppSharpGenerated.HelloClass> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::CppSharpGenerated.HelloClass>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::CppSharpGenerated.HelloClass __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::CppSharpGenerated.HelloClass(native.ToPointer(), skipVTables);
        }

        internal static global::CppSharpGenerated.HelloClass __CreateInstance(global::CppSharpGenerated.HelloClass.__Internal native, bool skipVTables = false)
        {
            return new global::CppSharpGenerated.HelloClass(native, skipVTables);
        }

        private static void* __CopyValue(global::CppSharpGenerated.HelloClass.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::CppSharpGenerated.HelloClass.__Internal));
            *(global::CppSharpGenerated.HelloClass.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private HelloClass(global::CppSharpGenerated.HelloClass.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected HelloClass(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public HelloClass()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::CppSharpGenerated.HelloClass.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public HelloClass(global::CppSharpGenerated.HelloClass _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::CppSharpGenerated.HelloClass.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::CppSharpGenerated.HelloClass.__Internal*) __Instance) = *((global::CppSharpGenerated.HelloClass.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::CppSharpGenerated.HelloClass __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public void Hello()
        {
            __Internal.Hello((__Instance + __PointerAdjustment));
        }
    }

    public unsafe partial class Foo : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 8)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal int a;

            [FieldOffset(4)]
            internal float b;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Lib", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0Foo@@QEAA@HM@Z")]
            internal static extern global::System.IntPtr ctor(global::System.IntPtr instance, int a, float b);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Lib", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0Foo@@QEAA@AEBV0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr instance, global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Lib", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?print@Foo@@QEAAXXZ")]
            internal static extern void Print(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Lib", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?FooAdd@@YAHPEAVFoo@@@Z")]
            internal static extern int Add(global::System.IntPtr instance);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::CppSharpGenerated.Foo> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::CppSharpGenerated.Foo>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::CppSharpGenerated.Foo __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::CppSharpGenerated.Foo(native.ToPointer(), skipVTables);
        }

        internal static global::CppSharpGenerated.Foo __CreateInstance(global::CppSharpGenerated.Foo.__Internal native, bool skipVTables = false)
        {
            return new global::CppSharpGenerated.Foo(native, skipVTables);
        }

        private static void* __CopyValue(global::CppSharpGenerated.Foo.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::CppSharpGenerated.Foo.__Internal));
            *(global::CppSharpGenerated.Foo.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private Foo(global::CppSharpGenerated.Foo.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected Foo(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public Foo(int a, float b)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::CppSharpGenerated.Foo.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            __Internal.ctor((__Instance + __PointerAdjustment), a, b);
        }

        public Foo(global::CppSharpGenerated.Foo _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::CppSharpGenerated.Foo.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::CppSharpGenerated.Foo.__Internal*) __Instance) = *((global::CppSharpGenerated.Foo.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::CppSharpGenerated.Foo __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public void Print()
        {
            __Internal.Print((__Instance + __PointerAdjustment));
        }

        public int Add()
        {
            var __ret = __Internal.Add((__Instance + __PointerAdjustment));
            return __ret;
        }

        public int A
        {
            get
            {
                return ((global::CppSharpGenerated.Foo.__Internal*) __Instance)->a;
            }

            set
            {
                ((global::CppSharpGenerated.Foo.__Internal*) __Instance)->a = value;
            }
        }

        public float B
        {
            get
            {
                return ((global::CppSharpGenerated.Foo.__Internal*) __Instance)->b;
            }

            set
            {
                ((global::CppSharpGenerated.Foo.__Internal*) __Instance)->b = value;
            }
        }
    }
}
